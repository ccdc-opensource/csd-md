#!/usr/bin/env python3
############################################################################################################################ 
#
# NOTICE WITH SOFTWARE                                                                                                  
#
# The Cambridge Crystallographic Data Centre (CCDC) provides various scripts to many users for use with CCDC applications.
# Some scripts may be library scripts, written at some earlier stage in time and distributed to other users. Other scripts
# may be written de novo or modified library scripts for distribution to a specific client for a specific purpose.
#
# Unless otherwise agreed, CCDC reserves the right to store a modified or de novo script and use that script as part of a
# library available to other users.
#
# No warranty: regardless of the intent of the parties, CCDC makes no warranty that any script is fit for any particular
# purpose.
#
# License grant: By accepting any CSD-MD script from CCDC, each user accedes to the following terms:
#
# - CSD-MD scripts and models remain the property of CCDC and the Richard Bryce Group at the University of Manchester (RBG).
#   Regardless of any changes made by a user, the original source code, models and script remain the property of CCDC and
#   the RBG, and users agree to make no claim of ownership thereof.
# - Users are granted a license to use the CSD-MD software for any purpose, and to change or modify (edit) the script to
#   suit specific needs.
# - Users may not share the CSD-MD script (unmodified or modified by the user) with any third party without permission from
#   CCDC or RBG.
# - Users will acknowledge the original authors when using CSD-MD and derived scripts in their research.
#
# Please note, this CSD-MD script is provided as-is, but is not formally supported by CCDC at this time.
#
############################################################################################################################
import os
import shutil
from pathlib import Path


###############################################################
# This script will clean up the files generated by the script
# test_install.py and leave the folder as it was before the
# tests.
###############################################################


EXAMPLES = [
        'asp-gas-MM', 'asp-solution-MM', 'asp-gas-MM-enhanced',
        'asp-gas-ML', 'asp-solution-ML', 'ibu-gas-ML',
        'ibu-solution-MM-enhanced', '4ph9-protein-MM',
        'asp-4ph9-MM', 'asp-4ph9-ML', 'ibu-4ph9-MM'
        ]

FILES = [   
         'COLVAR_1', 'COLVAR_2', 'HILLS_1', 'HILLS_2',
         'bck.0.COLVAR_1', 'bck.0.COLVAR_2', 'bck.0.HILLS_1',
         'bck.0.HILLS_2', 'conformer_generator.log',
         'conformer_generator.warn', 'db.json', 'output.pdb',
         'ibu-solution-MM-enhanced.log'
         ]

DIRECTORIES = ['docking_output', 'md_data', 'md_input']


def main():

    for example in EXAMPLES:
        file_path = Path.cwd() / f"{example}.log"
        if os.path.exists(file_path):
            os.remove(file_path)
        else:
            print(f"File {file_path} does not exist.")

    for file in FILES:
        file_path = Path.cwd() / f"{file}"
        if os.path.exists(file_path):
            os.remove(file_path)
        else:
            print(f"File {file_path} does not exist.")

    for directory in DIRECTORIES:
        dir_path = Path.cwd() / f"{directory}"
        if os.path.exists(dir_path):
            shutil.rmtree(dir_path)
        else:
            print(f"Directory {dir_path} does not exist.")


if __name__ == '__main__':
    main()

